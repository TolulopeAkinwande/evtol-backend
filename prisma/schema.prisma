// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Model {
  lightWeight
  middleWeight
  cruiserWeight
  heavyweight
}

enum State {
  idle
  loading
  loaded
  delivering
  delivered
  returning
}

enum Role {
  user 
  admin
}

model user {
  id Int @id @default(autoincrement())
  firstName String
  lastName String
  email String
  phoneNumber String
  password String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders order[]
  role Role
}

model medication {
  id Int @id @default(autoincrement())
  name String
  price Float
  quantity Int
  weight Float
  code String
  image String
  orderItems orderItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model evtol {
  id Int @id @default(autoincrement())
  serialNumber String
  model Model
  weightLimit Float
  state State
  batteryCapacity Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model order {
  id Int @id @default(autoincrement())
  userId Int
  user user @relation(fields: [userId], references: [id], onDelete: Cascade)
  totalAmount Float
  totalWeight Float
  items orderItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model orderItem {
  id Int @id @default(autoincrement())
  orderId Int 
  order order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  medicationId Int
  medication medication @relation(fields: [medicationId], references: [id], onDelete: Cascade)
  quantity Int
  amount Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model batteryLog {
  id Int @id @default(autoincrement())
  evtolId Int
  batteryLevel Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}